<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	<!-- 配置bean class:bean的全类名，通过反射的方式在IOC容器中创建Bean，所以要求Bean中必须有无参数的构造器 id:标识容器中的bean，id唯一。 -->
	<bean id="helloWorld" class="com.lemon.beans.HelloWorld">
		<property name="name" value="lemon "></property>
	</bean>

	<!-- 通过构造方法来配置bean的属性 -->
	<bean id="car" class="com.lemon.beans.Car">
		<constructor-arg value="Audi" index="0"></constructor-arg>
		<constructor-arg value="Shanghai" index="1"></constructor-arg>
		<constructor-arg value="300000" index="2" type="double"></constructor-arg>
	</bean>

	<!-- 使用构造器注入属性值可以指定参数的位置和参数的类型！以区分重载的构造器 -->
	<bean id="car2" class="com.lemon.beans.Car">
		<constructor-arg value="Baoma" index="0"></constructor-arg>
		<!-- 如果字面值包含特殊字符可以使用<![CDATA[]>包裹起来 -->
		<!-- 属性值也可以用value子节点进行配置 -->
		<constructor-arg index="1">
			<value><![CDATA[<Shanghai>]]></value>
		</constructor-arg>
		<constructor-arg type="int">
			<value>250</value>
		</constructor-arg>
	</bean>

	<!-- 可以使用property的ref属性建立bean之间的引用关系 -->
	<bean id="person" class="com.lemon.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="24"></property>
		<!-- <property name="car" > <ref bean="car"/> </property> -->
		<!-- 内部bean -->
		<property name="car">
			<bean class="com.lemon.beans.Car">
				<constructor-arg value="Ford"></constructor-arg>
				<constructor-arg value="Changan"></constructor-arg>
				<constructor-arg value="200000"></constructor-arg>
			</bean>
		</property>
	</bean>


	<bean id="person2" class="com.lemon.beans.Person">
		<constructor-arg value="Lemon"></constructor-arg>
		<constructor-arg value="25"></constructor-arg>
		<constructor-arg ref="car"></constructor-arg>
		<!-- 为级联属性赋值，注意：属性需要先初始化后才可以为级联属性赋值，否则会有异常，和Struts2不同 -->
		<property name="car.maxSpeed" value="250"></property>
	</bean>


	<!-- 配置集合属性值 -->
	<bean id="person3" class="com.lemon.beans.collections.Person">
		<property name="name" value="lemon "></property>
		<property name="age" value="25 "></property>
		<property name="cars">
			<list>
				<ref bean="car" />
				<ref bean="car2" />
			</list>
		</property>
	</bean>

	<!-- 配置Map属性值 -->
	<bean id="newPerson" class="com.lemon.beans.collections.NewPerson">
		<property name="name" value="lemonAi "></property>
		<property name="age" value="30 "></property>
		<property name="cars">
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB" value-ref="car2"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 配置Properties属性值 -->
	<bean id="dataSource" class="com.lemon.beans.collections.DataSource">
		<property name="porperties">
		<!-- 使用props和prop子节点来为Properties属性赋值 -->
			<props>
				<prop key="user">root</prop>
				<prop key="passwor">1234</prop>
				<prop key="jdbcUrl">jdbc:mysql:///test</prop>
				<prop key="driverClass">com.mysql.driver.class</prop>
			</props>
		</property>
	</bean>

</beans>
